---
AWSTemplateFormatVersion: 2010-09-09

Description: AWS CloudFormation for LAMP stack for MasterBuilder III by Ivo Janssen (jansseni@) 

Metadata:

  Authors:
    Description: Ivo Janssen (jansseni@amazon.com)
  License:
    Description: 'Inspired from https://github.com/aws-samples/aws-refarch-wordpress'

############
# PARAMETERS
############    
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Access
      Parameters:
        - EC2KeyName
        - SshAccessCidr
        - AlbAcmCertificate
        - DomainName
        - S3Source
    - Label:
        default: Network
      Parameters:
        - VpcCidr
        - AvailabilityZones
        - PublicSubnetCidr0
        - PublicSubnetCidr1
        - WebSubnetCidr0
        - WebSubnetCidr1
        - DBSubnetCidr0
        - DBSubnetCidr1
    - Label:
        default: Database
      Parameters:
        - DBName
        - DBUsername
        - DBPassword

    ParameterLabels:
      SshAccessCidr: 
        default: SSH Access CIDR
      EC2KeyName:
        default: EC2 Key Pair
      AlbAcmCertificate:
        default: ALB Certificate
      DomainName:
        default: DNS domain name
      S3Source:
        default: S3 bucket for website files

      VpcCidr: 
        default: VPC CIDR
      AvailabilityZones:
        default: Availability Zones
      PublicSubnetCidr0:
        default: Public subnet AZ1
      PublicSubnetCidr1:
        default: Public subnet AZ2
      WebSubnetCidr0:
        default: Web subnet AZ1
      WebSubnetCidr1:
        default: Web subnet AZ2
      DBSubnetCidr0:
        default: Database subnet AZ1
      DBSubnetCidr1:
        default: Database subnet AZ2

      DBName:
        default: Database name
      DBUsername:
        default: Database username
      DBPassword:
        default: Database password


Parameters:
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.0.0/16
    Description: CIDR block for the VPC
    Type: String
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC. SELECT AT LEAST TWO AZ's!
    Type: List<AWS::EC2::AvailabilityZone::Name>
    MinLength: 1
  PublicSubnetCidr0:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.1.0/24
    Description: CIDR block for public subnet (nat gw, bastion) located in Availability Zone 1
    Type: String
  PublicSubnetCidr1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.2.0/24
    Description: CIDR block for public subnet (nat gw, bastion) located in Availability Zone 2
    Type: String
  WebSubnetCidr0:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.11.0/24
    Description: CIDR block for web subnet 1 located in Availability Zone 1
    Type: String
  WebSubnetCidr1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.12.0/24
    Description: CIDR block for web subnet 2 located in Availability Zone 2
    Type: String
  DBSubnetCidr0:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.21.0/24
    Description: CIDR block for database subnet 1 located in Availability Zone 1
    Type: String
  DBSubnetCidr1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.31.22.0/24
    Description: CIDR block for database subnet 2 located in Availability Zone 2
    Type: String

  SshAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    Type: String
    Default: 0.0.0.0/0
  EC2KeyName:
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
  AlbAcmCertificate:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: 'The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB in advance'
    Type: String
  DomainName:
    Description: 'Domain name in which to add the DNS entry for the webserver'
    Type: String
  S3Source:
    Description: 'S3 bucket where website resides'
    Type: String
    Default: "ivo-mb-assets"

  DBUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 4
    Type: String
    Default: octank
  DBPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-    
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
    Default: password
  DBName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String 
    Default: octank

Resources:

############
# NETWORKING
############  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'VPC/', !Ref 'AWS::StackName' ] ]

  WebSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref WebSubnetCidr0
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet0/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref WebSubnetCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet1/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  DBSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref DBSubnetCidr0
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'DBSubnet0/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref DBSubnetCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'DBSubnet1/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref VPC
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnetCidr0
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet0/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet1/', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'IGW/', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  InternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetRouteTable1/', !Ref 'AWS::StackName' ] ]
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref InternetRouteTable
  InternetRouteAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet0
  InternetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet1

  NatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0
  NatRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable0/', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC
  NATRouteAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref WebSubnet0
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable1/', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC
  NATRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet1

############
# SECURITYGROUPS
############      
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '', [ 'Bastion-SG/', !Ref 'AWS::StackName' ] ]
      GroupDescription: Security group for Bastion instances
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Bastion-SG/', !Ref 'AWS::StackName' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAccessCidr
      VpcId:
        !Ref VPC      
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '', [ 'DB-SG/', !Ref 'AWS::StackName' ] ]
      GroupDescription: Security group for Amazon RDS cluster
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'DB-SG/', !Ref 'AWS::StackName' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      VpcId:
        !Ref VPC
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '', [ 'Web-SG/', !Ref 'AWS::StackName' ] ]
      GroupDescription: Security group for web instances
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web-SG/', !Ref 'AWS::StackName' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      VpcId:
        !Ref VPC     
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '', [ 'ALB-SG/', !Ref 'AWS::StackName' ] ]
      GroupDescription: Security group for ALB
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'ALB-SG/', !Ref 'AWS::StackName' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref VPC           

############
# EC2
############
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join [ '', [ 'InstanceProfile-', !Ref 'AWS::StackName' ] ]
      Path: /
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ 'InstanceRole-', !Ref 'AWS::StackName' ] ] 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
      - PolicyName: describe
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - ec2:DescribeInstances
            - rds:DescribeDBInstances
            Resource: '*'
      
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref WebLaunchConfiguration
      TargetGroupARNs:
        - !Ref AlbTargetGroup  
      MaxSize: 2
      MinSize: 2
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web/', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      VPCZoneIdentifier: [ !Ref WebSubnet0, !Ref WebSubnet1 ]
  WebLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: MasterDB
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref WebSecurityGroup
      UserData: 
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd php php-pdo php-mysql
            service httpd start
            chkconfig httpd on
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration --region ${AWS::Region}
            #/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
 
    Metadata: 
      AWS::CloudFormation::Init: 
        config:
          commands: 
            10copyS3:
              env:
                S3Source: !Ref S3Source
              command: aws s3 cp s3://${S3Source}/index.php /var/www/html/index.php && aws s3 cp s3://${S3Source}/vars.sh /tmp
            20runvars:
              env: 
                S3Source: !Ref S3Source
                Region: !Ref AWS::Region
                DBEndpoint: !GetAtt MasterDB.Endpoint.Address
                DBName: !Ref DBName
                DBUsername: !Ref DBUsername
                DBPassword: !Ref DBPassword
              command: sh /tmp/vars.sh

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Bastion/', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      VPCZoneIdentifier: [ !Ref PublicSubnet0, !Ref PublicSubnet1 ]
  BastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref BastionSecurityGroup
      UserData: 
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y
            # note: the odd use of single vs double quotes in the next two lines is on purpose. sigh bash...
            echo '#!/bin/sh' > /usr/bin/ec2list
            echo "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, PrivateIpAddress, Tags[?Key==\`Name\`].Value | [0]]' --output text --region ${AWS::Region}" >> /usr/bin/ec2list
            chmod 755 /usr/bin/ec2list

############
# LOAD BALANCER
############
  AlbListenerSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref AlbAcmCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
  ApplicationLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [ !Ref PublicSubnet0, !Ref PublicSubnet1 ]
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      SecurityGroups:
      - !Ref AlbSecurityGroup
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'ALB/', !Ref 'AWS::StackName' ] ]
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'ALB-tg/ ', !Ref 'AWS::StackName' ] ]
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  RecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ['', [!Ref DomainName, '.']]
      RecordSets:
      - Name: !Join ['', ['octank.', !Ref DomainName, '.']]
        Type: A
        AliasTarget:
          DNSName: !GetAtt [ ApplicationLoadBalancer, DNSName ]
          HostedZoneId: !GetAtt [ ApplicationLoadBalancer, CanonicalHostedZoneID ]

############
# DATABASE
############
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Database Subnet Group for WordPress
      SubnetIds: 
      - !Ref DBSubnet0
      - !Ref DBSubnet1
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Octank/', !Ref 'AWS::StackName' ] ]
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Join [ '', [ 'Octank-', !Ref 'AWS::StackName' ] ]
      DBName: !Ref 'DBName'
      AllocatedStorage: 20
      DBInstanceClass: db.m4.large
      StorageType: gp2
      Engine: MySQL
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      PubliclyAccessible: false
      MultiAZ: true
      Tags:
      - 
        Key: Name
        Value: Octank Master Database
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
      - !Ref DatabaseSecurityGroup
    DeletionPolicy: Delete
  # ReplicaDB:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     DBInstanceIdentifier: !Join [ '', [ 'Octank-RR-', !Ref 'AWS::StackName' ] ]
  #     SourceDBInstanceIdentifier: !Ref 'MasterDB'
  #     DBInstanceClass: db.m4.large
  #     StorageType: gp2
  #     Tags:
  #     - 
  #       Key: Name
  #       Value: Octank Read Replica Database


############
# OUTPUTS
############
Outputs:
  StackStatus:
    Description: Master Stack Status
    Value: !Join [ '', [ 'Stack created in region: ', !Ref 'AWS::Region' ] ]
  Website:
     Description: URL for the website
     Value: !Join ['', ['https://octank.', !Ref DomainName, '/']]
  S3Bucket:
     Description: S3 bucket with website assets
     Value: !Ref S3Source


# AMI mappings for generic Linux AMI
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-da9e2cbc
    ap-northeast-2:
      AMI: ami-1196317f
    ap-south-1:
      AMI: ami-d5c18eba
    ap-southeast-1:
      AMI: ami-c63d6aa5
    ap-southeast-2:
      AMI: ami-ff4ea59d
    ca-central-1:
      AMI: ami-d29e25b6
    eu-central-1:
      AMI: ami-bf2ba8d0
    eu-west-1:
      AMI: ami-1a962263
    eu-west-2:
      AMI: ami-e7d6c983
    sa-east-1:
      AMI: ami-286f2a44
    us-east-1:
      AMI: ami-55ef662f
    us-east-2:
      AMI: ami-15e9c770
    us-west-1:
      AMI: ami-a51f27c5
    us-west-2:
      AMI: ami-bf4193c7